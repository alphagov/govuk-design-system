---
layout: layout-single-page-prose.njk
---

# Get started

{% from "_example.njk" import example %}

This guide explains how to create prototypes using the GOV.UK Design System and GOV.UK Prototype Kit. For information on how to use production code visit the [GOV.UK Frontend](https://github.com/alphagov/govuk-frontend).

## Before you start

To make prototypes you will need to download and install a new version of the GOV.UK Prototype Kit which has been built to work with the Design System while it’s in private beta.

The installation process is the same as for the current version. You should:

* [download the new version of the GOV.UK Prototype Kit](https://govuk-prototype-kit-beta.herokuapp.com/)
* [follow these installation instructions](https://govuk-prototype-kit-beta.herokuapp.com/docs/install/introduction)

The rest of the guide assumes that you are familar with the GOV.UK Prototype Kit.

## Using the new Prototype Kit

The new version of the Prototype Kit is identical to the one you may have used before except that it uses a new frontend framework called GOV.UK Frontend.

This means that any code that you copy across from old prototypes will not display correctly. Instead, you should use the code provided in the Design System.

## Styling content

The Design System provides lots of new CSS classes for styling content, meaning you shouldn’t need to write as much of your own Sass or CSS.

The class names follow the [BEM naming convention](https://en.bem.info/methodology/quick-start/). This can look a bit daunting at first, but it makes for more robust code that’s easier to maintain.

There are 2 ways to apply styles to content. You can use either the prose scope wrapper or style individual elements.


### Using the prose scope wrapper

You can use the `govuk-prose-scope` class to apply GOV.UK styles to a block of text. This means you don’t need to apply classes to the individual elements.

<pre class="govuk-!-f-19 govuk-!-mb-r6"><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"govuk-prose-scope"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>A H1 heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>A paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>An unordered list:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>apples<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>oranges<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>pears<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></code></pre>

Prose scope is designed to be used with text content only. Don’t use it to style a section containing other elements, for example form inputs.

### Styling individual elements

If you need more control you can add classes to the individual elements instead of using the prose scope wrapper. Avoid styling individual elements within a prose scope wrapper.

<pre class="govuk-!-f-19 govuk-!-mb-r6"><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"govuk-heading-xl"</span>&gt;</span>A H1 heading<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"govuk-body"</span>&gt;</span>A paragraph.<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"govuk-body"</span>&gt;</span>An unordered list:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">ul</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"govuk-list govuk-list--bullet"</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>apples<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>oranges<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span>pears<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>
</code></pre>


Explore the [Styles section of the Design System](/styles/) to see what classes are available.


## Using components

Components are reusable user interface elements. The components in the Design System are designed to be accessible and responsive.

There are 2 ways to use components in the Design System. You can either use HTML or a Nunjucks Macro.

You can get the code from the HTML or Nunjucks tabs below any examples:

{{ example({group: 'components', item: 'button', example: 'default', html: true, nunjucks: true, open: false}) }}

Copy the code into your prototype where you want the component to appear.


### Using Nunjucks macros

A Nunjucks macro is a simple template that generates more complex HTML.

Nunjucks macros save you time by managing repetitive or error-prone tasks, like linking form labels to their controls.

Nunjucks macros also make it easier to keep your prototypes up to date. You can run a command to update component code instead of having to manually update your HTML.

When using Nunjucks macros in the Prototype Kit:

* omit the first line that starts with "{% raw %}{% from {% endraw %}...".
* save and preview regularly to check that the macro is working
