---
layout: layout-pane.njk
title: Using the Design System in production
order: 2
description: This guide explains how to set up your project so you can start using the styles and coded examples in the GOV.UK Design System in production
---

{% from "_example.njk" import example %}
{% from "inset-text/macro.njk" import govukInsetText %}

This guide explains how to set up your project so you can start using the styles and coded examples in the GOV.UK Design System in production.

{{ govukInsetText({
  classes: "app-table--constrained",
  html: "If you’ve used GOV.UK Elements, GOV.UK Template or the GOV.UK Frontend Toolkit before, you might also find it useful to read the guide on <a href='../updating-your-code'>updating your code</a>."
}) }}


## Include GOV.UK Frontend in your project

To start using GOV.UK styles, components and patterns contained here, you’ll need to include GOV.UK Frontend in your project.

There are 2 ways to include GOV.UK Frontend in your project. You can either install it using  node package manager (npm) or include the compiled files in your application.

### Option 1: install using npm

We recommend [installing GOV.UK Frontend using npm](https://github.com/alphagov/govuk-frontend/blob/master/docs/installation/installing-with-npm.md).

Using this option, you will be able to:

- selectively include the CSS or JavaScript for individual components
- build your own styles or components based on the palette or typography and spacing mixins
- customise the build (for example, overriding colours or enabling global styles)
- use the component Nunjucks templates

### Option 2: include compiled files

If your project does not use npm, or if you want to try out GOV.UK Frontend in your project without installing it through npm, you can [download and include compiled stylesheets, JavaScript and the asset files](https://github.com/alphagov/govuk-frontend/blob/master/docs/installation/installing-from-dist.md).

Using this option, you will be able to include all the CSS and JavaScript of GOV.UK Frontend in your project.

You will not be able to:


- selectively include the CSS or JavaScript for individual components
- build your own styles or components based on the palette or typography and spacing mixins
- customise the build, for example, overriding colours or enabling global styles
- use the component Nunjucks templates


## Styling page elements

The Design System provides CSS classes for styling content, instead of global styles.

The class names follow the Block Element Modifier (BEM) naming convention. This can look a bit daunting at first, but it makes robust code that’s easy to maintain.

Explore the [Styles](../../styles/) section of the Design System to see what classes are available.


## Using components

The components in the Design System are designed to be accessible and responsive - there are 2 ways to implement them in your application.

You can either use HTML or - if you’re using Nunjucks with node.js and you installed GOV.UK Frontend using npm - you can use a Nunjucks Macro.

You can get the code from the HTML or Nunjucks tabs below any examples:

{{ example({group: 'components', item: 'button', example: 'default', html: true, nunjucks: true, open: false}) }}

### Using Nunjucks macros

A Nunjucks macro is a simple template that generates more complex HTML.

Nunjucks macros save you time by managing repetitive or error-prone tasks, like linking form labels to their controls.

Nunjucks macros also make it easier to keep your application up to date. You can run a command to update component code instead of having to manually update your HTML.

To use Nunjucks macros in your application, you’ll need to setup Nunjucks views to point to the location of GOV.UK Frontend components, which is `node_modules/govuk-frontend/components/`.

To include a specific component macro in your page template, you need to import the macro.

For example, to use the breadcrumb macro, use the import statement `{% raw %}{% from "breadcrumbs/macro.njk" import govukBreadcrumbs %}{% endraw %}`.

{{ govukInsetText({
  classes: "app-table--constrained",
  html: "If you’re using Nunjucks macros in production be aware that using  <code>html</code> arguments, or ones ending with <code>Html</code> can be a <a href='https://en.wikipedia.org/wiki/Cross-site_scripting'>security risk</a>."
}) }}

There are various way to mitigate against that. One example is described in the [Nunjucks documentation](https://mozilla.github.io/nunjucks/api.html#user-defined-templates-warning).
